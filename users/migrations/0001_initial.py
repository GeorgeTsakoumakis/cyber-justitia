# Generated by Django 5.0.6 on 2024-05-30 16:20

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('first_name', models.CharField(max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(max_length=150, verbose_name='last name')),
                ('description', models.CharField(blank=True, help_text='A short description about yourself', max_length=256, null=True)),
                ('is_banned', models.BooleanField(default=False)),
                ('reason_banned', models.CharField(blank=True, help_text='Reason for banning this user', max_length=150, null=True, verbose_name='reason for getting banned')),
                ('email', models.EmailField(max_length=320, unique=True, verbose_name='email address')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'User',
                'verbose_name_plural': 'Users',
                'db_table': 'users',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='ProfessionalUser',
            fields=[
                ('prof_id', models.AutoField(primary_key=True, serialize=False)),
                ('flair', models.CharField(help_text='Short text that best describes your professional skills', max_length=100, verbose_name='professional flair')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Professional User',
                'verbose_name_plural': 'Professional Users',
                'db_table': 'professionals',
            },
        ),
        migrations.CreateModel(
            name='Employments',
            fields=[
                ('employment_id', models.AutoField(primary_key=True, serialize=False)),
                ('company', models.CharField(max_length=100, verbose_name='company')),
                ('position', models.CharField(max_length=100, verbose_name='position')),
                ('start_date', models.DateField(verbose_name='start date')),
                ('end_date', models.DateField(blank=True, null=True, verbose_name='end date')),
                ('prof_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='employments', to='users.professionaluser')),
            ],
            options={
                'verbose_name': 'Employment',
                'verbose_name_plural': 'Employments',
                'db_table': 'employments',
            },
        ),
        migrations.CreateModel(
            name='Education',
            fields=[
                ('education_id', models.AutoField(primary_key=True, serialize=False)),
                ('school_name', models.CharField(max_length=100, verbose_name='institution')),
                ('degree', models.CharField(max_length=100, verbose_name='degree')),
                ('start_date', models.DateField(verbose_name='start date')),
                ('end_date', models.DateField(blank=True, null=True, verbose_name='end date')),
                ('prof_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='educations', to='users.professionaluser')),
            ],
            options={
                'verbose_name': 'Education',
                'verbose_name_plural': 'Educations',
                'db_table': 'educations',
            },
        ),
    ]
